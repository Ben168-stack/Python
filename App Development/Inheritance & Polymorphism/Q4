import random


class Monster:
    def __init__(self, name, health, attack, defence):
        self.__name = name
        self.__health = health
        self.__attack = attack
        self.__defence = defence

    def get_name(self):
        return self.__name


class FireMonster(Monster):
    def __init__(self):
        super().__init__('firebug', 10, 9, 4)

    def __str__(self):
        return f"{Monster.get_name(self)} is a Fire Type Monster"


class WaterMonster(Monster):
    def __init__(self):
        super().__init__('waterbug', 15, 6, 3)

    def __str__(self):
        return f"{Monster.get_name(self)} is a Water Type Monster"


class GrassMonster(Monster):
    def __init__(self):
        super().__init__('grasshopper', 20, 5, 3)

    def __str__(self):
        return f"{Monster.get_name(self)} is a Grass Type Monster"

class MonsterGame(Monster):
    monsters = ['Firebug', "WaterBird", "Grasshopper"]

    def __init__(self):
        self.choose_monster()
        self.set_computer_monster()

    def choose_monster(self):
        monster = ''
        while monster not in ['F', "W", "G"]:
            monster = input("Choose Your Monster Type(F, W or G): ").title()
            if monster == 'F':
                self.player_monster = FireMonster()
                print(f'Player choose {self.player_monster.get_name()}')
            elif monster == 'W':
                self.player_monster = WaterMonster()
                print(f'Player choose {self.player_monster.get_name()}')
            elif monster == 'G':
                self.player_monster = GrassMonster()
                print(f'Player choose {self.player_monster.get_name()}')
            else:
                print("Invalid Monster Type!")

    def set_computer_monster(self):
        random_num = random.randint(0, (len(self.monsters) - 1))
        self.__computer_monster = self.monsters[random_num]
        print(f'Computer choose {self.__computer_monster}')

MonsterGame()
